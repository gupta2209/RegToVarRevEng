// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "diffeq.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic diffeq::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic diffeq::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> diffeq::ap_ST_fsm_state1 = "1";
const sc_lv<5> diffeq::ap_ST_fsm_state2 = "10";
const sc_lv<5> diffeq::ap_ST_fsm_state3 = "100";
const sc_lv<5> diffeq::ap_ST_fsm_state4 = "1000";
const sc_lv<5> diffeq::ap_ST_fsm_state5 = "10000";
const sc_lv<32> diffeq::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> diffeq::ap_const_lv32_1 = "1";
const sc_lv<32> diffeq::ap_const_lv32_2 = "10";
const sc_lv<32> diffeq::ap_const_lv32_3 = "11";
const sc_lv<32> diffeq::ap_const_lv32_4 = "100";
const bool diffeq::ap_const_boolean_1 = true;

diffeq::diffeq(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln20_fu_96_p0);
    sensitive << ( y );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( t7_reg_145 );
    sensitive << ( add_ln20_fu_96_p0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_mul_ln14_fu_56_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dx );

    SC_METHOD(thread_mul_ln14_fu_56_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( u );

    SC_METHOD(thread_mul_ln14_fu_56_p2);
    sensitive << ( mul_ln14_fu_56_p0 );
    sensitive << ( mul_ln14_fu_56_p1 );

    SC_METHOD(thread_shl_ln12_fu_44_p2);
    sensitive << ( x );

    SC_METHOD(thread_shl_ln15_fu_62_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dx );

    SC_METHOD(thread_shl_ln15_fu_62_p2);
    sensitive << ( shl_ln15_fu_62_p0 );

    SC_METHOD(thread_sub_ln18_fu_87_p2);
    sensitive << ( t5_reg_135 );
    sensitive << ( t6_fu_83_p2 );

    SC_METHOD(thread_t1_fu_50_p2);
    sensitive << ( x );
    sensitive << ( shl_ln12_fu_44_p2 );

    SC_METHOD(thread_t3_fu_74_p2);
    sensitive << ( t1_reg_110 );
    sensitive << ( mul_ln14_reg_115 );

    SC_METHOD(thread_t4_fu_68_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dx );

    SC_METHOD(thread_t4_fu_68_p2);
    sensitive << ( shl_ln15_fu_62_p2 );
    sensitive << ( t4_fu_68_p1 );

    SC_METHOD(thread_t5_fu_78_p0);
    sensitive << ( y );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_t5_fu_78_p2);
    sensitive << ( t4_reg_120 );
    sensitive << ( t5_fu_78_p0 );

    SC_METHOD(thread_t6_fu_83_p0);
    sensitive << ( u );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_t6_fu_83_p2);
    sensitive << ( t3_reg_130 );
    sensitive << ( t6_fu_83_p0 );

    SC_METHOD(thread_t7_fu_92_p0);
    sensitive << ( dx );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_t7_fu_92_p2);
    sensitive << ( sub_ln18_reg_140 );
    sensitive << ( t7_fu_92_p0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "diffeq_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, dx, "(port)dx");
    sc_trace(mVcdFile, u, "(port)u");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, t1_fu_50_p2, "t1_fu_50_p2");
    sc_trace(mVcdFile, t1_reg_110, "t1_reg_110");
    sc_trace(mVcdFile, mul_ln14_fu_56_p2, "mul_ln14_fu_56_p2");
    sc_trace(mVcdFile, mul_ln14_reg_115, "mul_ln14_reg_115");
    sc_trace(mVcdFile, t4_fu_68_p2, "t4_fu_68_p2");
    sc_trace(mVcdFile, t4_reg_120, "t4_reg_120");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, t3_fu_74_p2, "t3_fu_74_p2");
    sc_trace(mVcdFile, t3_reg_130, "t3_reg_130");
    sc_trace(mVcdFile, t5_fu_78_p2, "t5_fu_78_p2");
    sc_trace(mVcdFile, t5_reg_135, "t5_reg_135");
    sc_trace(mVcdFile, sub_ln18_fu_87_p2, "sub_ln18_fu_87_p2");
    sc_trace(mVcdFile, sub_ln18_reg_140, "sub_ln18_reg_140");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, t7_fu_92_p2, "t7_fu_92_p2");
    sc_trace(mVcdFile, t7_reg_145, "t7_reg_145");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, shl_ln12_fu_44_p2, "shl_ln12_fu_44_p2");
    sc_trace(mVcdFile, mul_ln14_fu_56_p0, "mul_ln14_fu_56_p0");
    sc_trace(mVcdFile, mul_ln14_fu_56_p1, "mul_ln14_fu_56_p1");
    sc_trace(mVcdFile, shl_ln15_fu_62_p0, "shl_ln15_fu_62_p0");
    sc_trace(mVcdFile, shl_ln15_fu_62_p2, "shl_ln15_fu_62_p2");
    sc_trace(mVcdFile, t4_fu_68_p1, "t4_fu_68_p1");
    sc_trace(mVcdFile, t5_fu_78_p0, "t5_fu_78_p0");
    sc_trace(mVcdFile, t6_fu_83_p0, "t6_fu_83_p0");
    sc_trace(mVcdFile, t6_fu_83_p2, "t6_fu_83_p2");
    sc_trace(mVcdFile, t7_fu_92_p0, "t7_fu_92_p0");
    sc_trace(mVcdFile, add_ln20_fu_96_p0, "add_ln20_fu_96_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("diffeq.hdltvin.dat");
    mHdltvoutHandle.open("diffeq.hdltvout.dat");
}

diffeq::~diffeq() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void diffeq::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        mul_ln14_reg_115 = mul_ln14_fu_56_p2.read();
        t1_reg_110 = t1_fu_50_p2.read();
        t4_reg_120 = t4_fu_68_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sub_ln18_reg_140 = sub_ln18_fu_87_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t3_reg_130 = t3_fu_74_p2.read();
        t5_reg_135 = t5_fu_78_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t7_reg_145 = t7_fu_92_p2.read();
    }
}

void diffeq::thread_add_ln20_fu_96_p0() {
    add_ln20_fu_96_p0 = y.read();
}

void diffeq::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void diffeq::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void diffeq::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void diffeq::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void diffeq::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void diffeq::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void diffeq::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void diffeq::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void diffeq::thread_ap_return() {
    ap_return = (!add_ln20_fu_96_p0.read().is_01() || !t7_reg_145.read().is_01())? sc_lv<32>(): (sc_bigint<32>(add_ln20_fu_96_p0.read()) + sc_biguint<32>(t7_reg_145.read()));
}

void diffeq::thread_mul_ln14_fu_56_p0() {
    mul_ln14_fu_56_p0 = dx.read();
}

void diffeq::thread_mul_ln14_fu_56_p1() {
    mul_ln14_fu_56_p1 = u.read();
}

void diffeq::thread_mul_ln14_fu_56_p2() {
    mul_ln14_fu_56_p2 = (!mul_ln14_fu_56_p0.read().is_01() || !mul_ln14_fu_56_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln14_fu_56_p0.read()) * sc_bigint<32>(mul_ln14_fu_56_p1.read());
}

void diffeq::thread_shl_ln12_fu_44_p2() {
    shl_ln12_fu_44_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): x.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void diffeq::thread_shl_ln15_fu_62_p0() {
    shl_ln15_fu_62_p0 = dx.read();
}

void diffeq::thread_shl_ln15_fu_62_p2() {
    shl_ln15_fu_62_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): shl_ln15_fu_62_p0.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void diffeq::thread_sub_ln18_fu_87_p2() {
    sub_ln18_fu_87_p2 = (!t6_fu_83_p2.read().is_01() || !t5_reg_135.read().is_01())? sc_lv<32>(): (sc_biguint<32>(t6_fu_83_p2.read()) - sc_biguint<32>(t5_reg_135.read()));
}

void diffeq::thread_t1_fu_50_p2() {
    t1_fu_50_p2 = (!shl_ln12_fu_44_p2.read().is_01() || !x.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln12_fu_44_p2.read()) - sc_biguint<32>(x.read()));
}

void diffeq::thread_t3_fu_74_p2() {
    t3_fu_74_p2 = (!mul_ln14_reg_115.read().is_01() || !t1_reg_110.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln14_reg_115.read()) * sc_bigint<32>(t1_reg_110.read());
}

void diffeq::thread_t4_fu_68_p1() {
    t4_fu_68_p1 = dx.read();
}

void diffeq::thread_t4_fu_68_p2() {
    t4_fu_68_p2 = (!shl_ln15_fu_62_p2.read().is_01() || !t4_fu_68_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln15_fu_62_p2.read()) - sc_bigint<32>(t4_fu_68_p1.read()));
}

void diffeq::thread_t5_fu_78_p0() {
    t5_fu_78_p0 = y.read();
}

void diffeq::thread_t5_fu_78_p2() {
    t5_fu_78_p2 = (!t5_fu_78_p0.read().is_01() || !t4_reg_120.read().is_01())? sc_lv<32>(): sc_bigint<32>(t5_fu_78_p0.read()) * sc_bigint<32>(t4_reg_120.read());
}

void diffeq::thread_t6_fu_83_p0() {
    t6_fu_83_p0 = u.read();
}

void diffeq::thread_t6_fu_83_p2() {
    t6_fu_83_p2 = (!t6_fu_83_p0.read().is_01() || !t3_reg_130.read().is_01())? sc_lv<32>(): (sc_bigint<32>(t6_fu_83_p0.read()) - sc_biguint<32>(t3_reg_130.read()));
}

void diffeq::thread_t7_fu_92_p0() {
    t7_fu_92_p0 = dx.read();
}

void diffeq::thread_t7_fu_92_p2() {
    t7_fu_92_p2 = (!t7_fu_92_p0.read().is_01() || !sub_ln18_reg_140.read().is_01())? sc_lv<32>(): sc_bigint<32>(t7_fu_92_p0.read()) * sc_bigint<32>(sub_ln18_reg_140.read());
}

void diffeq::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void diffeq::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dx\" :  \"" << dx.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"u\" :  \"" << u.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

