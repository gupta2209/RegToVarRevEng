-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity diffeq is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    dx : IN STD_LOGIC_VECTOR (31 downto 0);
    u : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of diffeq is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "diffeq,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=229,HLS_SYN_LUT=294,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t1_fu_50_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_56_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_reg_115 : STD_LOGIC_VECTOR (31 downto 0);
    signal t4_fu_68_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t4_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal t3_fu_74_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t3_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal t5_fu_78_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t5_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln18_fu_87_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln18_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t7_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t7_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln12_fu_44_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_56_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_56_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln15_fu_62_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln15_fu_62_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t4_fu_68_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t5_fu_78_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t6_fu_83_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t6_fu_83_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t7_fu_92_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_fu_96_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                mul_ln14_reg_115 <= mul_ln14_fu_56_p2;
                t1_reg_110 <= t1_fu_50_p2;
                t4_reg_120 <= t4_fu_68_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sub_ln18_reg_140 <= sub_ln18_fu_87_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t3_reg_130 <= t3_fu_74_p2;
                t5_reg_135 <= t5_fu_78_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                t7_reg_145 <= t7_fu_92_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln20_fu_96_p0 <= y;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(signed(add_ln20_fu_96_p0) + signed(t7_reg_145));
    mul_ln14_fu_56_p0 <= dx;
    mul_ln14_fu_56_p1 <= u;
    mul_ln14_fu_56_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln14_fu_56_p0) * signed(mul_ln14_fu_56_p1))), 32));
    shl_ln12_fu_44_p2 <= std_logic_vector(shift_left(unsigned(x),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln15_fu_62_p0 <= dx;
    shl_ln15_fu_62_p2 <= std_logic_vector(shift_left(unsigned(shl_ln15_fu_62_p0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    sub_ln18_fu_87_p2 <= std_logic_vector(unsigned(t6_fu_83_p2) - unsigned(t5_reg_135));
    t1_fu_50_p2 <= std_logic_vector(unsigned(shl_ln12_fu_44_p2) - unsigned(x));
    t3_fu_74_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln14_reg_115) * signed(t1_reg_110))), 32));
    t4_fu_68_p1 <= dx;
    t4_fu_68_p2 <= std_logic_vector(unsigned(shl_ln15_fu_62_p2) - unsigned(t4_fu_68_p1));
    t5_fu_78_p0 <= y;
    t5_fu_78_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(t5_fu_78_p0) * signed(t4_reg_120))), 32));
    t6_fu_83_p0 <= u;
    t6_fu_83_p2 <= std_logic_vector(signed(t6_fu_83_p0) - signed(t3_reg_130));
    t7_fu_92_p0 <= dx;
    t7_fu_92_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(t7_fu_92_p0) * signed(sub_ln18_reg_140))), 32));
end behav;
