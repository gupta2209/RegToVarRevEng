-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_macc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in3 : IN STD_LOGIC_VECTOR (31 downto 0);
    in4 : IN STD_LOGIC_VECTOR (31 downto 0);
    in7 : IN STD_LOGIC_VECTOR (31 downto 0);
    in8 : IN STD_LOGIC_VECTOR (31 downto 0);
    in9 : IN STD_LOGIC_VECTOR (31 downto 0);
    in10 : IN STD_LOGIC_VECTOR (31 downto 0);
    in14 : IN STD_LOGIC_VECTOR (31 downto 0);
    in12 : IN STD_LOGIC_VECTOR (31 downto 0);
    in15 : IN STD_LOGIC_VECTOR (31 downto 0);
    in17 : IN STD_LOGIC_VECTOR (31 downto 0);
    in19 : IN STD_LOGIC_VECTOR (31 downto 0);
    in20 : IN STD_LOGIC_VECTOR (31 downto 0);
    in22 : IN STD_LOGIC_VECTOR (31 downto 0);
    in24 : IN STD_LOGIC_VECTOR (31 downto 0);
    in27 : IN STD_LOGIC_VECTOR (31 downto 0);
    in28 : IN STD_LOGIC_VECTOR (31 downto 0);
    in29 : IN STD_LOGIC_VECTOR (31 downto 0);
    in32 : IN STD_LOGIC_VECTOR (31 downto 0);
    out13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out13_ap_vld : OUT STD_LOGIC;
    out30_i : IN STD_LOGIC_VECTOR (31 downto 0);
    out30_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    out30_o_ap_vld : OUT STD_LOGIC;
    out31 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out31_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hls_macc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_macc,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=165,HLS_SYN_LUT=670,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sub_ln11_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln11_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal t23_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t23_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal t26_1_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t26_1_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal t16_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t16_1_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t16_1_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_t16_0_phi_fu_210_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal t16_0_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln28_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t5_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t11_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t25_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t26_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t26_2_fu_292_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    t16_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_356 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t16_0_reg_207 <= t16_1_reg_380;
            elsif (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t16_0_reg_207 <= t16_fu_277_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln13_reg_356 <= icmp_ln13_fu_241_p2;
                sub_ln11_reg_351 <= sub_ln11_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln18_reg_360 <= icmp_ln18_fu_247_p2;
                t23_reg_365 <= t23_fu_259_p2;
                t26_1_reg_370 <= t26_1_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t16_1_reg_380 <= t16_1_fu_298_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln13_fu_241_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln12_fu_229_p2 <= std_logic_vector(unsigned(in7) + unsigned(in12));
    add_ln21_fu_253_p2 <= std_logic_vector(unsigned(t5_fu_216_p2) + unsigned(in22));
    add_ln26_fu_265_p2 <= std_logic_vector(unsigned(in19) + unsigned(in20));
    add_ln28_fu_303_p2 <= std_logic_vector(unsigned(t26_2_fu_292_p3) + unsigned(in29));
    add_ln30_fu_309_p2 <= std_logic_vector(unsigned(ap_phi_mux_t16_0_phi_fu_210_p4) + unsigned(in32));
    add_ln31_fu_315_p2 <= std_logic_vector(unsigned(sub_ln11_reg_351) + unsigned(add_ln30_fu_309_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t16_0_phi_fu_210_p4_assign_proc : process(icmp_ln13_reg_356, t16_1_reg_380, t16_0_reg_207, ap_CS_fsm_state3)
    begin
        if (((icmp_ln13_reg_356 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_t16_0_phi_fu_210_p4 <= t16_1_reg_380;
        else 
            ap_phi_mux_t16_0_phi_fu_210_p4 <= t16_0_reg_207;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln31_fu_315_p2) + unsigned(out30_i));
    icmp_ln13_fu_241_p2 <= "1" when (in2 = in1) else "0";
    icmp_ln18_fu_247_p2 <= "1" when (signed(in9) < signed(in10)) else "0";
    out13 <= std_logic_vector(unsigned(in14) - unsigned(in15));

    out13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out13_ap_vld <= ap_const_logic_1;
        else 
            out13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out30_o_assign_proc : process(out30_i, ap_CS_fsm_state2, add_ln28_fu_303_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out30_o <= add_ln28_fu_303_p2;
        else 
            out30_o <= out30_i;
        end if; 
    end process;


    out30_o_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out30_o_ap_vld <= ap_const_logic_1;
        else 
            out30_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out31 <= add_ln30_fu_309_p2;

    out31_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out31_ap_vld <= ap_const_logic_1;
        else 
            out31_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln11_fu_222_p2 <= std_logic_vector(unsigned(in14) - unsigned(in15));
    t11_fu_235_p2 <= std_logic_vector(unsigned(add_ln12_fu_229_p2) + unsigned(in8));
    t16_1_fu_298_p2 <= std_logic_vector(unsigned(t26_2_fu_292_p3) - unsigned(in28));
    t16_fu_277_p2 <= std_logic_vector(unsigned(t11_fu_235_p2) - unsigned(in17));
    t23_fu_259_p2 <= std_logic_vector(unsigned(add_ln21_fu_253_p2) + unsigned(t11_fu_235_p2));
    t25_fu_283_p2 <= std_logic_vector(unsigned(t23_reg_365) - unsigned(in24));
    t26_1_fu_271_p2 <= std_logic_vector(unsigned(add_ln26_fu_265_p2) + unsigned(t5_fu_216_p2));
    t26_2_fu_292_p3 <= 
        t26_fu_287_p2 when (icmp_ln18_reg_360(0) = '1') else 
        t26_1_reg_370;
    t26_fu_287_p2 <= std_logic_vector(unsigned(t25_fu_283_p2) + unsigned(in27));
    t5_fu_216_p2 <= std_logic_vector(unsigned(in3) - unsigned(in4));
end behav;
