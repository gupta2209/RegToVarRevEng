-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_macc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i1 : IN STD_LOGIC_VECTOR (31 downto 0);
    i2 : IN STD_LOGIC_VECTOR (31 downto 0);
    i3 : IN STD_LOGIC_VECTOR (31 downto 0);
    i4 : IN STD_LOGIC_VECTOR (31 downto 0);
    i5 : IN STD_LOGIC_VECTOR (31 downto 0);
    i6 : IN STD_LOGIC_VECTOR (31 downto 0);
    o1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o1_ap_vld : OUT STD_LOGIC;
    o2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_ap_vld : OUT STD_LOGIC;
    o3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o3_ap_vld : OUT STD_LOGIC;
    o4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o4_ap_vld : OUT STD_LOGIC;
    G1 : IN STD_LOGIC_VECTOR (31 downto 0);
    G2 : IN STD_LOGIC_VECTOR (31 downto 0);
    G3 : IN STD_LOGIC_VECTOR (31 downto 0);
    G4 : IN STD_LOGIC_VECTOR (31 downto 0);
    GG1 : IN STD_LOGIC_VECTOR (31 downto 0);
    GG2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hls_macc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_macc,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=45,HLS_SYN_FF=679,HLS_SYN_LUT=831,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal op5_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal op13_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op13_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal op14_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op14_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal op17_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op17_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal op18_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op18_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_1_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_1_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal op19_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op19_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal op20_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op20_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal op1_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op1_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal op2_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal op21_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op21_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal op22_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op22_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal op27_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op27_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp1_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal op28_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_fu_139_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_fu_151_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_fu_157_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op17_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op18_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_1_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op1_fu_207_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op1_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op21_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op22_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_1_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_1_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln33_1_reg_347 <= mul_ln33_1_fu_195_p2;
                mul_ln33_reg_342 <= mul_ln33_fu_191_p2;
                op17_reg_332 <= op17_fu_183_p2;
                op18_reg_337 <= op18_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                op13_reg_316 <= op13_fu_168_p2;
                op14_reg_324 <= op14_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                op19_reg_352 <= op19_fu_199_p2;
                op20_reg_358 <= op20_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                op1_reg_364 <= op1_fu_207_p2;
                op21_reg_374 <= op21_fu_219_p2;
                op22_reg_379 <= op22_fu_223_p2;
                op2_reg_369 <= op2_fu_213_p2;
                tmp2_reg_389 <= tmp2_fu_232_p2;
                tmp_reg_384 <= tmp_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                op27_reg_394 <= op27_fu_245_p2;
                tmp1_reg_400 <= tmp1_fu_251_p2;
                tmp3_reg_405 <= tmp3_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                op5_reg_296 <= op5_fu_139_p2;
                op6_reg_301 <= op6_fu_145_p2;
                op7_reg_306 <= op7_fu_151_p2;
                op8_reg_311 <= op8_fu_157_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln25_fu_163_p2 <= std_logic_vector(unsigned(op6_reg_301) + unsigned(i5));
    add_ln27_fu_173_p2 <= std_logic_vector(unsigned(op8_reg_311) + unsigned(i6));
    add_ln41_1_fu_241_p2 <= std_logic_vector(unsigned(op2_reg_369) + unsigned(op21_reg_374));
    add_ln41_fu_237_p2 <= std_logic_vector(unsigned(op1_reg_364) + unsigned(op22_reg_379));
    add_ln46_1_fu_269_p2 <= std_logic_vector(signed(op14_reg_324) + signed(op27_reg_394));
    add_ln46_fu_264_p2 <= std_logic_vector(signed(op13_reg_316) + signed(op28_fu_259_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return1 <= std_logic_vector(unsigned(add_ln46_1_fu_269_p2) + unsigned(add_ln46_fu_264_p2));

    ap_return1_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return1_ap_vld <= ap_const_logic_1;
        else 
            ap_return1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln33_1_fu_195_p1 <= G2;
    mul_ln33_1_fu_195_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op13_reg_316) * signed(mul_ln33_1_fu_195_p1))), 32));
    mul_ln33_fu_191_p1 <= G1;
    mul_ln33_fu_191_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op14_reg_324) * signed(mul_ln33_fu_191_p1))), 32));
    o1 <= op13_reg_316;

    o1_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            o1_ap_vld <= ap_const_logic_1;
        else 
            o1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    o2 <= op14_reg_324;

    o2_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            o2_ap_vld <= ap_const_logic_1;
        else 
            o2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    o3 <= op27_reg_394;

    o3_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            o3_ap_vld <= ap_const_logic_1;
        else 
            o3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    o4 <= op28_fu_259_p2;

    o4_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            o4_ap_vld <= ap_const_logic_1;
        else 
            o4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    op13_fu_168_p2 <= std_logic_vector(unsigned(add_ln25_fu_163_p2) + unsigned(op5_reg_296));
    op14_fu_178_p2 <= std_logic_vector(unsigned(add_ln27_fu_173_p2) + unsigned(op7_reg_306));
    op17_fu_183_p1 <= G1;
    op17_fu_183_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op13_reg_316) * signed(op17_fu_183_p1))), 32));
    op18_fu_187_p1 <= G2;
    op18_fu_187_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op14_reg_324) * signed(op18_fu_187_p1))), 32));
    op19_fu_199_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln33_1_reg_347) * signed(mul_ln33_reg_342))), 32));
    op1_fu_207_p0 <= GG1;
    op1_fu_207_p1 <= i1;
    op1_fu_207_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op1_fu_207_p0) * signed(op1_fu_207_p1))), 32));
    op20_fu_203_p2 <= std_logic_vector(unsigned(op17_reg_332) + unsigned(op18_reg_337));
    op21_fu_219_p1 <= G1;
    op21_fu_219_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op20_reg_358) * signed(op21_fu_219_p1))), 32));
    op22_fu_223_p1 <= G2;
    op22_fu_223_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op19_reg_352) * signed(op22_fu_223_p1))), 32));
    op27_fu_245_p2 <= std_logic_vector(unsigned(add_ln41_1_fu_241_p2) + unsigned(add_ln41_fu_237_p2));
    op28_fu_259_p2 <= std_logic_vector(unsigned(tmp3_reg_405) + unsigned(tmp1_reg_400));
    op2_fu_213_p0 <= GG2;
    op2_fu_213_p1 <= i2;
    op2_fu_213_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op2_fu_213_p0) * signed(op2_fu_213_p1))), 32));
    op5_fu_139_p0 <= G1;
    op5_fu_139_p1 <= i3;
    op5_fu_139_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op5_fu_139_p0) * signed(op5_fu_139_p1))), 32));
    op6_fu_145_p0 <= G2;
    op6_fu_145_p1 <= i4;
    op6_fu_145_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op6_fu_145_p0) * signed(op6_fu_145_p1))), 32));
    op7_fu_151_p0 <= G1;
    op7_fu_151_p1 <= i4;
    op7_fu_151_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op7_fu_151_p0) * signed(op7_fu_151_p1))), 32));
    op8_fu_157_p0 <= G2;
    op8_fu_157_p1 <= i3;
    op8_fu_157_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op8_fu_157_p0) * signed(op8_fu_157_p1))), 32));
    tmp1_fu_251_p1 <= G2;
    tmp1_fu_251_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_384) * signed(tmp1_fu_251_p1))), 32));
    tmp2_fu_232_p1 <= i2;
    tmp2_fu_232_p2 <= std_logic_vector(signed(op19_reg_352) + signed(tmp2_fu_232_p1));
    tmp3_fu_255_p1 <= G1;
    tmp3_fu_255_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp2_reg_389) * signed(tmp3_fu_255_p1))), 32));
    tmp_fu_227_p1 <= i1;
    tmp_fu_227_p2 <= std_logic_vector(signed(op20_reg_358) + signed(tmp_fu_227_p1));
end behav;
