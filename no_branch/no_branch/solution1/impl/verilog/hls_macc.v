// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_macc,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=45,HLS_SYN_FF=679,HLS_SYN_LUT=831,HLS_VERSION=2019_2}" *)

module hls_macc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i1,
        i2,
        i3,
        i4,
        i5,
        i6,
        o1,
        o1_ap_vld,
        o2,
        o2_ap_vld,
        o3,
        o3_ap_vld,
        o4,
        o4_ap_vld,
        G1,
        G2,
        G3,
        G4,
        GG1,
        GG2,
        ap_return1,
        ap_return1_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i1;
input  [31:0] i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
output  [31:0] o1;
output   o1_ap_vld;
output  [31:0] o2;
output   o2_ap_vld;
output  [31:0] o3;
output   o3_ap_vld;
output  [31:0] o4;
output   o4_ap_vld;
input  [31:0] G1;
input  [31:0] G2;
input  [31:0] G3;
input  [31:0] G4;
input  [31:0] GG1;
input  [31:0] GG2;
output  [31:0] ap_return1;
output   ap_return1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg o1_ap_vld;
reg o2_ap_vld;
reg o3_ap_vld;
reg o4_ap_vld;
reg ap_return1_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] op5_fu_139_p2;
reg   [31:0] op5_reg_296;
wire   [31:0] op6_fu_145_p2;
reg   [31:0] op6_reg_301;
wire   [31:0] op7_fu_151_p2;
reg   [31:0] op7_reg_306;
wire   [31:0] op8_fu_157_p2;
reg   [31:0] op8_reg_311;
wire  signed [31:0] op13_fu_168_p2;
reg  signed [31:0] op13_reg_316;
wire    ap_CS_fsm_state2;
wire  signed [31:0] op14_fu_178_p2;
reg  signed [31:0] op14_reg_324;
wire   [31:0] op17_fu_183_p2;
reg   [31:0] op17_reg_332;
wire    ap_CS_fsm_state3;
wire   [31:0] op18_fu_187_p2;
reg   [31:0] op18_reg_337;
wire  signed [31:0] mul_ln33_fu_191_p2;
reg  signed [31:0] mul_ln33_reg_342;
wire  signed [31:0] mul_ln33_1_fu_195_p2;
reg  signed [31:0] mul_ln33_1_reg_347;
wire  signed [31:0] op19_fu_199_p2;
reg  signed [31:0] op19_reg_352;
wire    ap_CS_fsm_state4;
wire  signed [31:0] op20_fu_203_p2;
reg  signed [31:0] op20_reg_358;
wire   [31:0] op1_fu_207_p2;
reg   [31:0] op1_reg_364;
wire    ap_CS_fsm_state5;
wire   [31:0] op2_fu_213_p2;
reg   [31:0] op2_reg_369;
wire   [31:0] op21_fu_219_p2;
reg   [31:0] op21_reg_374;
wire   [31:0] op22_fu_223_p2;
reg   [31:0] op22_reg_379;
wire  signed [31:0] tmp_fu_227_p2;
reg  signed [31:0] tmp_reg_384;
wire  signed [31:0] tmp2_fu_232_p2;
reg  signed [31:0] tmp2_reg_389;
wire   [31:0] op27_fu_245_p2;
reg   [31:0] op27_reg_394;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp1_fu_251_p2;
reg   [31:0] tmp1_reg_400;
wire   [31:0] tmp3_fu_255_p2;
reg   [31:0] tmp3_reg_405;
wire    ap_CS_fsm_state7;
wire   [31:0] op28_fu_259_p2;
wire  signed [31:0] op5_fu_139_p0;
wire  signed [31:0] op5_fu_139_p1;
wire  signed [31:0] op6_fu_145_p0;
wire  signed [31:0] op6_fu_145_p1;
wire  signed [31:0] op7_fu_151_p0;
wire  signed [31:0] op7_fu_151_p1;
wire  signed [31:0] op8_fu_157_p0;
wire  signed [31:0] op8_fu_157_p1;
wire   [31:0] add_ln25_fu_163_p2;
wire   [31:0] add_ln27_fu_173_p2;
wire  signed [31:0] op17_fu_183_p1;
wire  signed [31:0] op18_fu_187_p1;
wire  signed [31:0] mul_ln33_fu_191_p1;
wire  signed [31:0] mul_ln33_1_fu_195_p1;
wire  signed [31:0] op1_fu_207_p0;
wire  signed [31:0] op1_fu_207_p1;
wire  signed [31:0] op2_fu_213_p0;
wire  signed [31:0] op2_fu_213_p1;
wire  signed [31:0] op21_fu_219_p1;
wire  signed [31:0] op22_fu_223_p1;
wire  signed [31:0] tmp_fu_227_p1;
wire  signed [31:0] tmp2_fu_232_p1;
wire   [31:0] add_ln41_1_fu_241_p2;
wire   [31:0] add_ln41_fu_237_p2;
wire  signed [31:0] tmp1_fu_251_p1;
wire  signed [31:0] tmp3_fu_255_p1;
wire   [31:0] add_ln46_1_fu_269_p2;
wire   [31:0] add_ln46_fu_264_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln33_1_reg_347 <= mul_ln33_1_fu_195_p2;
        mul_ln33_reg_342 <= mul_ln33_fu_191_p2;
        op17_reg_332 <= op17_fu_183_p2;
        op18_reg_337 <= op18_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        op13_reg_316 <= op13_fu_168_p2;
        op14_reg_324 <= op14_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        op19_reg_352 <= op19_fu_199_p2;
        op20_reg_358 <= op20_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        op1_reg_364 <= op1_fu_207_p2;
        op21_reg_374 <= op21_fu_219_p2;
        op22_reg_379 <= op22_fu_223_p2;
        op2_reg_369 <= op2_fu_213_p2;
        tmp2_reg_389 <= tmp2_fu_232_p2;
        tmp_reg_384 <= tmp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        op27_reg_394 <= op27_fu_245_p2;
        tmp1_reg_400 <= tmp1_fu_251_p2;
        tmp3_reg_405 <= tmp3_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        op5_reg_296 <= op5_fu_139_p2;
        op6_reg_301 <= op6_fu_145_p2;
        op7_reg_306 <= op7_fu_151_p2;
        op8_reg_311 <= op8_fu_157_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return1_ap_vld = 1'b1;
    end else begin
        ap_return1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o1_ap_vld = 1'b1;
    end else begin
        o1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o2_ap_vld = 1'b1;
    end else begin
        o2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o3_ap_vld = 1'b1;
    end else begin
        o3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o4_ap_vld = 1'b1;
    end else begin
        o4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_163_p2 = (op6_reg_301 + i5);

assign add_ln27_fu_173_p2 = (op8_reg_311 + i6);

assign add_ln41_1_fu_241_p2 = (op2_reg_369 + op21_reg_374);

assign add_ln41_fu_237_p2 = (op1_reg_364 + op22_reg_379);

assign add_ln46_1_fu_269_p2 = ($signed(op14_reg_324) + $signed(op27_reg_394));

assign add_ln46_fu_264_p2 = ($signed(op13_reg_316) + $signed(op28_fu_259_p2));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return1 = (add_ln46_1_fu_269_p2 + add_ln46_fu_264_p2);

assign mul_ln33_1_fu_195_p1 = G2;

assign mul_ln33_1_fu_195_p2 = ($signed(op13_reg_316) * $signed(mul_ln33_1_fu_195_p1));

assign mul_ln33_fu_191_p1 = G1;

assign mul_ln33_fu_191_p2 = ($signed(op14_reg_324) * $signed(mul_ln33_fu_191_p1));

assign o1 = op13_reg_316;

assign o2 = op14_reg_324;

assign o3 = op27_reg_394;

assign o4 = op28_fu_259_p2;

assign op13_fu_168_p2 = (add_ln25_fu_163_p2 + op5_reg_296);

assign op14_fu_178_p2 = (add_ln27_fu_173_p2 + op7_reg_306);

assign op17_fu_183_p1 = G1;

assign op17_fu_183_p2 = ($signed(op13_reg_316) * $signed(op17_fu_183_p1));

assign op18_fu_187_p1 = G2;

assign op18_fu_187_p2 = ($signed(op14_reg_324) * $signed(op18_fu_187_p1));

assign op19_fu_199_p2 = ($signed(mul_ln33_1_reg_347) * $signed(mul_ln33_reg_342));

assign op1_fu_207_p0 = GG1;

assign op1_fu_207_p1 = i1;

assign op1_fu_207_p2 = ($signed(op1_fu_207_p0) * $signed(op1_fu_207_p1));

assign op20_fu_203_p2 = (op17_reg_332 + op18_reg_337);

assign op21_fu_219_p1 = G1;

assign op21_fu_219_p2 = ($signed(op20_reg_358) * $signed(op21_fu_219_p1));

assign op22_fu_223_p1 = G2;

assign op22_fu_223_p2 = ($signed(op19_reg_352) * $signed(op22_fu_223_p1));

assign op27_fu_245_p2 = (add_ln41_1_fu_241_p2 + add_ln41_fu_237_p2);

assign op28_fu_259_p2 = (tmp3_reg_405 + tmp1_reg_400);

assign op2_fu_213_p0 = GG2;

assign op2_fu_213_p1 = i2;

assign op2_fu_213_p2 = ($signed(op2_fu_213_p0) * $signed(op2_fu_213_p1));

assign op5_fu_139_p0 = G1;

assign op5_fu_139_p1 = i3;

assign op5_fu_139_p2 = ($signed(op5_fu_139_p0) * $signed(op5_fu_139_p1));

assign op6_fu_145_p0 = G2;

assign op6_fu_145_p1 = i4;

assign op6_fu_145_p2 = ($signed(op6_fu_145_p0) * $signed(op6_fu_145_p1));

assign op7_fu_151_p0 = G1;

assign op7_fu_151_p1 = i4;

assign op7_fu_151_p2 = ($signed(op7_fu_151_p0) * $signed(op7_fu_151_p1));

assign op8_fu_157_p0 = G2;

assign op8_fu_157_p1 = i3;

assign op8_fu_157_p2 = ($signed(op8_fu_157_p0) * $signed(op8_fu_157_p1));

assign tmp1_fu_251_p1 = G2;

assign tmp1_fu_251_p2 = ($signed(tmp_reg_384) * $signed(tmp1_fu_251_p1));

assign tmp2_fu_232_p1 = i2;

assign tmp2_fu_232_p2 = ($signed(op19_reg_352) + $signed(tmp2_fu_232_p1));

assign tmp3_fu_255_p1 = G1;

assign tmp3_fu_255_p2 = ($signed(tmp2_reg_389) * $signed(tmp3_fu_255_p1));

assign tmp_fu_227_p1 = i1;

assign tmp_fu_227_p2 = ($signed(op20_reg_358) + $signed(tmp_fu_227_p1));

endmodule //hls_macc
