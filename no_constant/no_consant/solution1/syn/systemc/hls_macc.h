// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _hls_macc_HH_
#define _hls_macc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct hls_macc : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > i1;
    sc_in< sc_lv<32> > i2;
    sc_in< sc_lv<32> > i3;
    sc_in< sc_lv<32> > i4;
    sc_in< sc_lv<32> > i6;
    sc_out< sc_lv<32> > o1;
    sc_out< sc_logic > o1_ap_vld;
    sc_out< sc_lv<32> > o2;
    sc_out< sc_logic > o2_ap_vld;
    sc_in< sc_lv<32> > o3;
    sc_in< sc_lv<32> > o4;
    sc_in< sc_lv<32> > G1;
    sc_in< sc_lv<32> > G2;
    sc_in< sc_lv<32> > G3;
    sc_in< sc_lv<32> > G4;
    sc_in< sc_lv<32> > GG1;
    sc_in< sc_lv<32> > GG2;
    sc_out< sc_lv<32> > ap_return1;
    sc_out< sc_logic > ap_return1_ap_vld;


    // Module declarations
    hls_macc(sc_module_name name);
    SC_HAS_PROCESS(hls_macc);

    ~hls_macc();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > op4_fu_127_p2;
    sc_signal< sc_lv<32> > op4_reg_273;
    sc_signal< sc_lv<32> > op5_fu_133_p2;
    sc_signal< sc_lv<32> > op5_reg_280;
    sc_signal< sc_lv<32> > op5_2_fu_139_p2;
    sc_signal< sc_lv<32> > op5_2_reg_285;
    sc_signal< sc_lv<1> > icmp_ln16_fu_145_p2;
    sc_signal< sc_lv<1> > icmp_ln16_reg_291;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > op5_1_fu_150_p2;
    sc_signal< sc_lv<32> > op5_1_reg_296;
    sc_signal< sc_lv<1> > icmp_ln27_fu_162_p2;
    sc_signal< sc_lv<1> > icmp_ln27_reg_301;
    sc_signal< sc_lv<32> > op3_fu_167_p2;
    sc_signal< sc_lv<32> > op3_reg_306;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > op6_3_fu_172_p2;
    sc_signal< sc_lv<32> > op6_3_reg_311;
    sc_signal< sc_lv<32> > op7_fu_176_p2;
    sc_signal< sc_lv<32> > op7_reg_316;
    sc_signal< sc_lv<32> > op8_fu_180_p2;
    sc_signal< sc_lv<32> > op8_reg_321;
    sc_signal< sc_lv<32> > op13_fu_215_p2;
    sc_signal< sc_lv<32> > op13_reg_326;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > op14_fu_225_p2;
    sc_signal< sc_lv<32> > op14_reg_332;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > op4_fu_127_p0;
    sc_signal< sc_lv<32> > op4_fu_127_p1;
    sc_signal< sc_lv<32> > op5_fu_133_p0;
    sc_signal< sc_lv<32> > op5_fu_133_p1;
    sc_signal< sc_lv<32> > op5_2_fu_139_p0;
    sc_signal< sc_lv<32> > op5_2_fu_139_p1;
    sc_signal< sc_lv<32> > icmp_ln16_fu_145_p0;
    sc_signal< sc_lv<32> > op5_3_fu_155_p3;
    sc_signal< sc_lv<32> > op3_fu_167_p0;
    sc_signal< sc_lv<32> > op3_fu_167_p1;
    sc_signal< sc_lv<32> > op6_3_fu_172_p0;
    sc_signal< sc_lv<32> > op6_3_fu_172_p1;
    sc_signal< sc_lv<32> > op7_fu_176_p0;
    sc_signal< sc_lv<32> > op7_fu_176_p1;
    sc_signal< sc_lv<32> > op8_fu_180_p0;
    sc_signal< sc_lv<32> > op8_fu_180_p1;
    sc_signal< sc_lv<32> > op6_fu_184_p2;
    sc_signal< sc_lv<32> > op6_1_fu_188_p2;
    sc_signal< sc_lv<32> > op6_4_fu_199_p1;
    sc_signal< sc_lv<32> > op6_4_fu_199_p2;
    sc_signal< sc_lv<32> > op6_2_fu_192_p3;
    sc_signal< sc_lv<32> > op6_5_fu_203_p3;
    sc_signal< sc_lv<32> > add_ln47_fu_210_p1;
    sc_signal< sc_lv<32> > add_ln47_fu_210_p2;
    sc_signal< sc_lv<32> > add_ln49_fu_220_p2;
    sc_signal< sc_lv<32> > add_ln52_1_fu_236_p2;
    sc_signal< sc_lv<32> > add_ln52_fu_230_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_A;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln47_fu_210_p1();
    void thread_add_ln47_fu_210_p2();
    void thread_add_ln49_fu_220_p2();
    void thread_add_ln52_1_fu_236_p2();
    void thread_add_ln52_fu_230_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return1();
    void thread_ap_return1_ap_vld();
    void thread_icmp_ln16_fu_145_p0();
    void thread_icmp_ln16_fu_145_p2();
    void thread_icmp_ln27_fu_162_p2();
    void thread_o1();
    void thread_o1_ap_vld();
    void thread_o2();
    void thread_o2_ap_vld();
    void thread_op13_fu_215_p2();
    void thread_op14_fu_225_p2();
    void thread_op3_fu_167_p0();
    void thread_op3_fu_167_p1();
    void thread_op3_fu_167_p2();
    void thread_op4_fu_127_p0();
    void thread_op4_fu_127_p1();
    void thread_op4_fu_127_p2();
    void thread_op5_1_fu_150_p2();
    void thread_op5_2_fu_139_p0();
    void thread_op5_2_fu_139_p1();
    void thread_op5_2_fu_139_p2();
    void thread_op5_3_fu_155_p3();
    void thread_op5_fu_133_p0();
    void thread_op5_fu_133_p1();
    void thread_op5_fu_133_p2();
    void thread_op6_1_fu_188_p2();
    void thread_op6_2_fu_192_p3();
    void thread_op6_3_fu_172_p0();
    void thread_op6_3_fu_172_p1();
    void thread_op6_3_fu_172_p2();
    void thread_op6_4_fu_199_p1();
    void thread_op6_4_fu_199_p2();
    void thread_op6_5_fu_203_p3();
    void thread_op6_fu_184_p2();
    void thread_op7_fu_176_p0();
    void thread_op7_fu_176_p1();
    void thread_op7_fu_176_p2();
    void thread_op8_fu_180_p0();
    void thread_op8_fu_180_p1();
    void thread_op8_fu_180_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
