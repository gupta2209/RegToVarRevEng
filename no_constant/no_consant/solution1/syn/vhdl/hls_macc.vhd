-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_macc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i1 : IN STD_LOGIC_VECTOR (31 downto 0);
    i2 : IN STD_LOGIC_VECTOR (31 downto 0);
    i3 : IN STD_LOGIC_VECTOR (31 downto 0);
    i4 : IN STD_LOGIC_VECTOR (31 downto 0);
    i6 : IN STD_LOGIC_VECTOR (31 downto 0);
    o1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o1_ap_vld : OUT STD_LOGIC;
    o2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_ap_vld : OUT STD_LOGIC;
    o3 : IN STD_LOGIC_VECTOR (31 downto 0);
    o4 : IN STD_LOGIC_VECTOR (31 downto 0);
    G1 : IN STD_LOGIC_VECTOR (31 downto 0);
    G2 : IN STD_LOGIC_VECTOR (31 downto 0);
    G3 : IN STD_LOGIC_VECTOR (31 downto 0);
    G4 : IN STD_LOGIC_VECTOR (31 downto 0);
    GG1 : IN STD_LOGIC_VECTOR (31 downto 0);
    GG2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hls_macc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_macc,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=327,HLS_SYN_LUT=692,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal op4_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op4_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_2_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_2_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal op5_1_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_1_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal op3_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op3_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal op6_3_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_3_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal op13_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op13_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal op14_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op14_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal op4_fu_127_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op4_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_2_fu_139_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_2_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op5_3_fu_155_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal op3_fu_167_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op3_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_3_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_3_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_fu_176_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op7_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal op8_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_1_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_4_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_4_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_2_fu_192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal op6_5_fu_203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_1_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln16_reg_291 <= icmp_ln16_fu_145_p2;
                icmp_ln27_reg_301 <= icmp_ln27_fu_162_p2;
                op5_1_reg_296 <= op5_1_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                op13_reg_326 <= op13_fu_215_p2;
                op14_reg_332 <= op14_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_301 = ap_const_lv1_0) and (icmp_ln16_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                op3_reg_306 <= op3_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                op4_reg_273 <= op4_fu_127_p2;
                op5_2_reg_285 <= op5_2_fu_139_p2;
                op5_reg_280 <= op5_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_301 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                op6_3_reg_311 <= op6_3_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                op7_reg_316 <= op7_fu_176_p2;
                op8_reg_321 <= op8_fu_180_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln47_fu_210_p1 <= G1;
    add_ln47_fu_210_p2 <= std_logic_vector(unsigned(op6_5_fu_203_p3) + unsigned(add_ln47_fu_210_p1));
    add_ln49_fu_220_p2 <= std_logic_vector(unsigned(op8_reg_321) + unsigned(i6));
    add_ln52_1_fu_236_p2 <= std_logic_vector(unsigned(op13_reg_326) + unsigned(op14_reg_332));
    add_ln52_fu_230_p2 <= std_logic_vector(unsigned(o3) + unsigned(o4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return1 <= std_logic_vector(unsigned(add_ln52_1_fu_236_p2) + unsigned(add_ln52_fu_230_p2));

    ap_return1_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return1_ap_vld <= ap_const_logic_1;
        else 
            ap_return1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln16_fu_145_p0 <= G1;
    icmp_ln16_fu_145_p2 <= "1" when (signed(icmp_ln16_fu_145_p0) > signed(ap_const_lv32_A)) else "0";
    icmp_ln27_fu_162_p2 <= "1" when (signed(op5_3_fu_155_p3) < signed(op4_reg_273)) else "0";
    o1 <= op13_reg_326;

    o1_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            o1_ap_vld <= ap_const_logic_1;
        else 
            o1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    o2 <= op14_reg_332;

    o2_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            o2_ap_vld <= ap_const_logic_1;
        else 
            o2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    op13_fu_215_p2 <= std_logic_vector(unsigned(add_ln47_fu_210_p2) + unsigned(op4_reg_273));
    op14_fu_225_p2 <= std_logic_vector(unsigned(add_ln49_fu_220_p2) + unsigned(op7_reg_316));
    op3_fu_167_p0 <= G1;
    op3_fu_167_p1 <= i2;
    op3_fu_167_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op3_fu_167_p0) * signed(op3_fu_167_p1))), 32));
    op4_fu_127_p0 <= G2;
    op4_fu_127_p1 <= i1;
    op4_fu_127_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op4_fu_127_p0) * signed(op4_fu_127_p1))), 32));
    op5_1_fu_150_p2 <= std_logic_vector(unsigned(op5_reg_280) + unsigned(GG1));
    op5_2_fu_139_p0 <= i4;
    op5_2_fu_139_p1 <= i3;
    op5_2_fu_139_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op5_2_fu_139_p0) * signed(op5_2_fu_139_p1))), 32));
    op5_3_fu_155_p3 <= 
        op5_1_fu_150_p2 when (icmp_ln16_fu_145_p2(0) = '1') else 
        op5_2_reg_285;
    op5_fu_133_p0 <= G1;
    op5_fu_133_p1 <= i3;
    op5_fu_133_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op5_fu_133_p0) * signed(op5_fu_133_p1))), 32));
    op6_1_fu_188_p2 <= std_logic_vector(unsigned(op5_2_reg_285) - unsigned(op3_reg_306));
    op6_2_fu_192_p3 <= 
        op6_fu_184_p2 when (icmp_ln16_reg_291(0) = '1') else 
        op6_1_fu_188_p2;
    op6_3_fu_172_p0 <= G2;
    op6_3_fu_172_p1 <= i4;
    op6_3_fu_172_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op6_3_fu_172_p0) * signed(op6_3_fu_172_p1))), 32));
    op6_4_fu_199_p1 <= i3;
    op6_4_fu_199_p2 <= std_logic_vector(unsigned(op6_3_reg_311) - unsigned(op6_4_fu_199_p1));
    op6_5_fu_203_p3 <= 
        op6_4_fu_199_p2 when (icmp_ln27_reg_301(0) = '1') else 
        op6_2_fu_192_p3;
    op6_fu_184_p2 <= std_logic_vector(unsigned(op5_1_reg_296) - unsigned(op4_reg_273));
    op7_fu_176_p0 <= G1;
    op7_fu_176_p1 <= i4;
    op7_fu_176_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op7_fu_176_p0) * signed(op7_fu_176_p1))), 32));
    op8_fu_180_p0 <= G2;
    op8_fu_180_p1 <= i3;
    op8_fu_180_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op8_fu_180_p0) * signed(op8_fu_180_p1))), 32));
end behav;
