// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _hls_macc_HH_
#define _hls_macc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct hls_macc : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in1;
    sc_in< sc_lv<32> > in2;
    sc_in< sc_lv<32> > in3;
    sc_in< sc_lv<32> > in4;
    sc_in< sc_lv<32> > in5;
    sc_in< sc_lv<32> > in6;
    sc_in< sc_lv<32> > in7;
    sc_in< sc_lv<32> > in8;
    sc_in< sc_lv<32> > in9;
    sc_in< sc_lv<32> > in10;
    sc_out< sc_lv<32> > out1;
    sc_out< sc_logic > out1_ap_vld;
    sc_out< sc_lv<32> > out2;
    sc_out< sc_logic > out2_ap_vld;
    sc_out< sc_lv<32> > out3;
    sc_out< sc_logic > out3_ap_vld;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    hls_macc(sc_module_name name);
    SC_HAS_PROCESS(hls_macc);

    ~hls_macc();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > add3_fu_125_p2;
    sc_signal< sc_lv<32> > add3_reg_288;
    sc_signal< sc_lv<32> > add5_fu_131_p2;
    sc_signal< sc_lv<32> > add5_reg_293;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > mult2_fu_137_p2;
    sc_signal< sc_lv<32> > mult2_reg_326;
    sc_signal< sc_lv<32> > mult10_fu_143_p2;
    sc_signal< sc_lv<32> > mult10_reg_331;
    sc_signal< sc_lv<32> > tmp_fu_149_p2;
    sc_signal< sc_lv<32> > tmp_reg_336;
    sc_signal< sc_lv<32> > tmp6_fu_154_p2;
    sc_signal< sc_lv<32> > tmp6_reg_341;
    sc_signal< sc_lv<32> > mult7_fu_158_p2;
    sc_signal< sc_lv<32> > mult7_reg_346;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > mult11_fu_162_p2;
    sc_signal< sc_lv<32> > mult11_reg_351;
    sc_signal< sc_lv<32> > mult13_fu_167_p2;
    sc_signal< sc_lv<32> > mult13_reg_356;
    sc_signal< sc_lv<32> > mul_ln24_fu_172_p2;
    sc_signal< sc_lv<32> > mul_ln24_reg_361;
    sc_signal< sc_lv<32> > add_ln30_fu_177_p2;
    sc_signal< sc_lv<32> > add_ln30_reg_366;
    sc_signal< sc_lv<32> > tmp3_fu_181_p2;
    sc_signal< sc_lv<32> > tmp3_reg_371;
    sc_signal< sc_lv<32> > tmp4_fu_186_p2;
    sc_signal< sc_lv<32> > tmp4_reg_376;
    sc_signal< sc_lv<32> > add_ln42_fu_190_p2;
    sc_signal< sc_lv<32> > add_ln42_reg_381;
    sc_signal< sc_lv<32> > tmp7_fu_195_p2;
    sc_signal< sc_lv<32> > tmp7_reg_386;
    sc_signal< sc_lv<32> > add2_fu_199_p2;
    sc_signal< sc_lv<32> > add2_reg_391;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > add6_fu_203_p2;
    sc_signal< sc_lv<32> > add6_reg_396;
    sc_signal< sc_lv<32> > add9_fu_207_p2;
    sc_signal< sc_lv<32> > add9_reg_402;
    sc_signal< sc_lv<32> > tmp5_fu_211_p2;
    sc_signal< sc_lv<32> > tmp5_reg_407;
    sc_signal< sc_lv<32> > add13_fu_215_p2;
    sc_signal< sc_lv<32> > add13_reg_412;
    sc_signal< sc_lv<29> > trunc_ln_reg_417;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > add_ln40_fu_243_p2;
    sc_signal< sc_lv<32> > add_ln49_fu_257_p2;
    sc_signal< sc_lv<32> > add3_fu_125_p0;
    sc_signal< sc_lv<32> > add3_fu_125_p1;
    sc_signal< sc_lv<32> > add5_fu_131_p0;
    sc_signal< sc_lv<32> > add5_fu_131_p1;
    sc_signal< sc_lv<32> > mult2_fu_137_p0;
    sc_signal< sc_lv<32> > mult2_fu_137_p1;
    sc_signal< sc_lv<32> > mult10_fu_143_p0;
    sc_signal< sc_lv<32> > mult10_fu_143_p1;
    sc_signal< sc_lv<32> > tmp6_fu_154_p0;
    sc_signal< sc_lv<32> > mult7_fu_158_p0;
    sc_signal< sc_lv<32> > mult7_fu_158_p1;
    sc_signal< sc_lv<32> > mult11_fu_162_p0;
    sc_signal< sc_lv<32> > mult11_fu_162_p1;
    sc_signal< sc_lv<32> > mult13_fu_167_p0;
    sc_signal< sc_lv<32> > mult13_fu_167_p1;
    sc_signal< sc_lv<32> > mul_ln24_fu_172_p0;
    sc_signal< sc_lv<32> > mul_ln24_fu_172_p1;
    sc_signal< sc_lv<32> > tmp3_fu_181_p0;
    sc_signal< sc_lv<32> > tmp4_fu_186_p0;
    sc_signal< sc_lv<32> > add_ln42_fu_190_p0;
    sc_signal< sc_lv<32> > tmp7_fu_195_p0;
    sc_signal< sc_lv<32> > add2_fu_199_p0;
    sc_signal< sc_lv<32> > add6_fu_203_p0;
    sc_signal< sc_lv<32> > tmp5_fu_211_p0;
    sc_signal< sc_lv<32> > add13_fu_215_p0;
    sc_signal< sc_lv<32> > add14_fu_219_p2;
    sc_signal< sc_lv<32> > shf1_fu_233_p2;
    sc_signal< sc_lv<32> > add_ln40_1_fu_238_p2;
    sc_signal< sc_lv<32> > shf2_fu_249_p1;
    sc_signal< sc_lv<32> > add_ln49_1_fu_252_p2;
    sc_signal< sc_lv<32> > add_ln51_fu_263_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add13_fu_215_p0();
    void thread_add13_fu_215_p2();
    void thread_add14_fu_219_p2();
    void thread_add2_fu_199_p0();
    void thread_add2_fu_199_p2();
    void thread_add3_fu_125_p0();
    void thread_add3_fu_125_p1();
    void thread_add3_fu_125_p2();
    void thread_add5_fu_131_p0();
    void thread_add5_fu_131_p1();
    void thread_add5_fu_131_p2();
    void thread_add6_fu_203_p0();
    void thread_add6_fu_203_p2();
    void thread_add9_fu_207_p2();
    void thread_add_ln30_fu_177_p2();
    void thread_add_ln40_1_fu_238_p2();
    void thread_add_ln40_fu_243_p2();
    void thread_add_ln42_fu_190_p0();
    void thread_add_ln42_fu_190_p2();
    void thread_add_ln49_1_fu_252_p2();
    void thread_add_ln49_fu_257_p2();
    void thread_add_ln51_fu_263_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_mul_ln24_fu_172_p0();
    void thread_mul_ln24_fu_172_p1();
    void thread_mul_ln24_fu_172_p2();
    void thread_mult10_fu_143_p0();
    void thread_mult10_fu_143_p1();
    void thread_mult10_fu_143_p2();
    void thread_mult11_fu_162_p0();
    void thread_mult11_fu_162_p1();
    void thread_mult11_fu_162_p2();
    void thread_mult13_fu_167_p0();
    void thread_mult13_fu_167_p1();
    void thread_mult13_fu_167_p2();
    void thread_mult2_fu_137_p0();
    void thread_mult2_fu_137_p1();
    void thread_mult2_fu_137_p2();
    void thread_mult7_fu_158_p0();
    void thread_mult7_fu_158_p1();
    void thread_mult7_fu_158_p2();
    void thread_out1();
    void thread_out1_ap_vld();
    void thread_out2();
    void thread_out2_ap_vld();
    void thread_out3();
    void thread_out3_ap_vld();
    void thread_shf1_fu_233_p2();
    void thread_shf2_fu_249_p1();
    void thread_tmp3_fu_181_p0();
    void thread_tmp3_fu_181_p2();
    void thread_tmp4_fu_186_p0();
    void thread_tmp4_fu_186_p2();
    void thread_tmp5_fu_211_p0();
    void thread_tmp5_fu_211_p2();
    void thread_tmp6_fu_154_p0();
    void thread_tmp6_fu_154_p2();
    void thread_tmp7_fu_195_p0();
    void thread_tmp7_fu_195_p2();
    void thread_tmp_fu_149_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
