-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_macc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in3 : IN STD_LOGIC_VECTOR (31 downto 0);
    in4 : IN STD_LOGIC_VECTOR (31 downto 0);
    in5 : IN STD_LOGIC_VECTOR (31 downto 0);
    in6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in7 : IN STD_LOGIC_VECTOR (31 downto 0);
    in8 : IN STD_LOGIC_VECTOR (31 downto 0);
    in9 : IN STD_LOGIC_VECTOR (31 downto 0);
    in10 : IN STD_LOGIC_VECTOR (31 downto 0);
    out1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out1_ap_vld : OUT STD_LOGIC;
    out2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out2_ap_vld : OUT STD_LOGIC;
    out3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out3_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hls_macc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_macc,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=42,HLS_SYN_FF=674,HLS_SYN_LUT=778,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add3_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mult2_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult2_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult10_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult10_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult7_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult7_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mult11_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult11_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult13_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult13_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add6_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add6_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal add9_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add9_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal add13_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add13_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_417 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln40_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_fu_125_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult2_fu_137_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult2_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult10_fu_143_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult10_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult7_fu_158_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult7_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult11_fu_162_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult11_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult13_fu_167_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult13_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_195_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add6_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add13_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add14_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shf1_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shf2_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_1_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add13_reg_412 <= add13_fu_215_p2;
                add2_reg_391 <= add2_fu_199_p2;
                add6_reg_396 <= add6_fu_203_p2;
                add9_reg_402 <= add9_fu_207_p2;
                tmp5_reg_407 <= tmp5_fu_211_p2;
                trunc_ln_reg_417 <= add14_fu_219_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add3_reg_288 <= add3_fu_125_p2;
                add5_reg_293 <= add5_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln30_reg_366 <= add_ln30_fu_177_p2;
                add_ln42_reg_381 <= add_ln42_fu_190_p2;
                mul_ln24_reg_361 <= mul_ln24_fu_172_p2;
                mult11_reg_351 <= mult11_fu_162_p2;
                mult13_reg_356 <= mult13_fu_167_p2;
                mult7_reg_346 <= mult7_fu_158_p2;
                tmp3_reg_371 <= tmp3_fu_181_p2;
                tmp4_reg_376 <= tmp4_fu_186_p2;
                tmp7_reg_386 <= tmp7_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mult10_reg_331 <= mult10_fu_143_p2;
                mult2_reg_326 <= mult2_fu_137_p2;
                tmp6_reg_341 <= tmp6_fu_154_p2;
                tmp_reg_336 <= tmp_fu_149_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add13_fu_215_p0 <= in4;
    add13_fu_215_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add13_fu_215_p0) * signed(add_ln42_reg_381))), 32));
    add14_fu_219_p2 <= std_logic_vector(unsigned(tmp7_reg_386) + unsigned(mult13_reg_356));
    add2_fu_199_p0 <= in4;
    add2_fu_199_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add2_fu_199_p0) * signed(mul_ln24_reg_361))), 32));
    add3_fu_125_p0 <= in7;
    add3_fu_125_p1 <= in4;
    add3_fu_125_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add3_fu_125_p0) * signed(add3_fu_125_p1))), 32));
    add5_fu_131_p0 <= in10;
    add5_fu_131_p1 <= in10;
    add5_fu_131_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add5_fu_131_p0) * signed(add5_fu_131_p1))), 32));
    add6_fu_203_p0 <= in1;
    add6_fu_203_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add6_fu_203_p0) * signed(add_ln30_reg_366))), 32));
    add9_fu_207_p2 <= std_logic_vector(unsigned(tmp3_reg_371) + unsigned(mult7_reg_346));
    add_ln30_fu_177_p2 <= std_logic_vector(unsigned(in2) + unsigned(mult2_reg_326));
    add_ln40_1_fu_238_p2 <= std_logic_vector(unsigned(shf1_fu_233_p2) + unsigned(tmp5_reg_407));
    add_ln40_fu_243_p2 <= std_logic_vector(unsigned(add2_reg_391) + unsigned(add_ln40_1_fu_238_p2));
    add_ln42_fu_190_p0 <= in8;
    add_ln42_fu_190_p2 <= std_logic_vector(signed(add_ln42_fu_190_p0) + signed(mult10_reg_331));
    add_ln49_1_fu_252_p2 <= std_logic_vector(signed(shf2_fu_249_p1) + signed(add13_reg_412));
    add_ln49_fu_257_p2 <= std_logic_vector(unsigned(mult11_reg_351) + unsigned(add_ln49_1_fu_252_p2));
    add_ln51_fu_263_p2 <= std_logic_vector(unsigned(add_ln40_fu_243_p2) + unsigned(add6_reg_396));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln49_fu_257_p2) + unsigned(add_ln51_fu_263_p2));
    mul_ln24_fu_172_p0 <= in5;
    mul_ln24_fu_172_p1 <= in4;
    mul_ln24_fu_172_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln24_fu_172_p0) * signed(mul_ln24_fu_172_p1))), 32));
    mult10_fu_143_p0 <= in9;
    mult10_fu_143_p1 <= in6;
    mult10_fu_143_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mult10_fu_143_p0) * signed(mult10_fu_143_p1))), 32));
    mult11_fu_162_p0 <= in8;
    mult11_fu_162_p1 <= in6;
    mult11_fu_162_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mult11_fu_162_p0) * signed(mult11_fu_162_p1))), 32));
    mult13_fu_167_p0 <= in8;
    mult13_fu_167_p1 <= in7;
    mult13_fu_167_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mult13_fu_167_p0) * signed(mult13_fu_167_p1))), 32));
    mult2_fu_137_p0 <= in3;
    mult2_fu_137_p1 <= in1;
    mult2_fu_137_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mult2_fu_137_p0) * signed(mult2_fu_137_p1))), 32));
    mult7_fu_158_p0 <= in6;
    mult7_fu_158_p1 <= in3;
    mult7_fu_158_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mult7_fu_158_p0) * signed(mult7_fu_158_p1))), 32));
    out1 <= add6_reg_396;

    out1_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out1_ap_vld <= ap_const_logic_1;
        else 
            out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out2 <= add_ln40_fu_243_p2;

    out2_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out2_ap_vld <= ap_const_logic_1;
        else 
            out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out3 <= add_ln49_fu_257_p2;

    out3_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out3_ap_vld <= ap_const_logic_1;
        else 
            out3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shf1_fu_233_p2 <= std_logic_vector(shift_left(unsigned(add9_reg_402),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
        shf2_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_417),32));

    tmp3_fu_181_p0 <= in5;
    tmp3_fu_181_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp3_fu_181_p0) * signed(tmp_reg_336))), 32));
    tmp4_fu_186_p0 <= in7;
    tmp4_fu_186_p2 <= std_logic_vector(signed(tmp4_fu_186_p0) + signed(in2));
    tmp5_fu_211_p0 <= in3;
    tmp5_fu_211_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp5_fu_211_p0) * signed(tmp4_reg_376))), 32));
    tmp6_fu_154_p0 <= in7;
    tmp6_fu_154_p2 <= std_logic_vector(signed(tmp6_fu_154_p0) + signed(add5_reg_293));
    tmp7_fu_195_p0 <= in9;
    tmp7_fu_195_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp7_fu_195_p0) * signed(tmp6_reg_341))), 32));
    tmp_fu_149_p2 <= std_logic_vector(unsigned(in2) + unsigned(add3_reg_288));
end behav;
