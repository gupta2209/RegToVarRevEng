-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity parker is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in3 : IN STD_LOGIC_VECTOR (31 downto 0);
    in4 : IN STD_LOGIC_VECTOR (31 downto 0);
    in5 : IN STD_LOGIC_VECTOR (31 downto 0);
    in6 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of parker is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "parker,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.656000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=744,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t6_6_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t6_6_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln21_fu_66_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln31_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t6_4_fu_90_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t6_3_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t6_5_fu_96_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t4_2_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t4_1_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t4_fu_104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t4_3_fu_128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t4_4_fu_136_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t6_1_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t6_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln19_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t6_2_fu_171_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t6_7_fu_179_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln46_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out1_1_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out1_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                t6_6_reg_231 <= t6_6_fu_144_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        out1_1_fu_197_p2 when (icmp_ln46_fu_186_p2(0) = '1') else 
        out1_fu_192_p2;
    icmp_ln19_fu_150_p2 <= "1" when (in5 = ap_const_lv32_0) else "0";
    icmp_ln21_fu_72_p2 <= "1" when (in2 = sub_ln21_fu_66_p2) else "0";
    icmp_ln24_fu_110_p2 <= "1" when (in1 = ap_const_lv32_4) else "0";
    icmp_ln31_fu_78_p2 <= "1" when (in4 = ap_const_lv32_0) else "0";
    icmp_ln41_fu_155_p2 <= "1" when (in6 = ap_const_lv32_0) else "0";
    icmp_ln46_fu_186_p2 <= "1" when (t6_7_fu_179_p3 = ap_const_lv32_0) else "0";
    out1_1_fu_197_p2 <= std_logic_vector(unsigned(in5) + unsigned(ap_const_lv32_8));
    out1_fu_192_p2 <= std_logic_vector(unsigned(in1) + unsigned(ap_const_lv32_FFFFFFFB));
    sub_ln21_fu_66_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(in3));
    t4_1_fu_116_p2 <= std_logic_vector(unsigned(in2) + unsigned(ap_const_lv32_4));
    t4_2_fu_122_p2 <= std_logic_vector(unsigned(in3) - unsigned(in5));
    t4_3_fu_128_p3 <= 
        t4_2_fu_122_p2 when (icmp_ln24_fu_110_p2(0) = '1') else 
        t4_1_fu_116_p2;
    t4_4_fu_136_p3 <= 
        t4_fu_104_p2 when (icmp_ln21_fu_72_p2(0) = '1') else 
        t4_3_fu_128_p3;
    t4_fu_104_p2 <= std_logic_vector(unsigned(t6_5_fu_96_p3) - unsigned(in4));
    t6_1_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) - unsigned(in4));
    t6_2_fu_171_p3 <= 
        t6_1_fu_166_p2 when (icmp_ln41_fu_155_p2(0) = '1') else 
        t6_fu_161_p2;
    t6_3_fu_84_p2 <= std_logic_vector(unsigned(in2) + unsigned(in1));
    t6_4_fu_90_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(in2));
    t6_5_fu_96_p3 <= 
        t6_4_fu_90_p2 when (icmp_ln31_fu_78_p2(0) = '1') else 
        t6_3_fu_84_p2;
    t6_6_fu_144_p2 <= std_logic_vector(unsigned(t4_4_fu_136_p3) + unsigned(in4));
    t6_7_fu_179_p3 <= 
        t6_2_fu_171_p3 when (icmp_ln19_fu_150_p2(0) = '1') else 
        t6_6_reg_231;
    t6_fu_161_p2 <= std_logic_vector(unsigned(in2) + unsigned(ap_const_lv32_5));
end behav;
