// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "parker.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic parker::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic parker::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> parker::ap_ST_fsm_state1 = "1";
const sc_lv<2> parker::ap_ST_fsm_state2 = "10";
const sc_lv<32> parker::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> parker::ap_const_lv32_1 = "1";
const sc_lv<32> parker::ap_const_lv32_4 = "100";
const sc_lv<32> parker::ap_const_lv32_5 = "101";
const sc_lv<32> parker::ap_const_lv32_8 = "1000";
const sc_lv<32> parker::ap_const_lv32_FFFFFFFB = "11111111111111111111111111111011";
const bool parker::ap_const_boolean_1 = true;

parker::parker(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln46_fu_186_p2 );
    sensitive << ( out1_1_fu_197_p2 );
    sensitive << ( out1_fu_192_p2 );

    SC_METHOD(thread_icmp_ln19_fu_150_p2);
    sensitive << ( in5 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln21_fu_72_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in2 );
    sensitive << ( sub_ln21_fu_66_p2 );

    SC_METHOD(thread_icmp_ln24_fu_110_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in1 );

    SC_METHOD(thread_icmp_ln31_fu_78_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in4 );

    SC_METHOD(thread_icmp_ln41_fu_155_p2);
    sensitive << ( in6 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln46_fu_186_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t6_7_fu_179_p3 );

    SC_METHOD(thread_out1_1_fu_197_p2);
    sensitive << ( in5 );

    SC_METHOD(thread_out1_fu_192_p2);
    sensitive << ( in1 );

    SC_METHOD(thread_sub_ln21_fu_66_p2);
    sensitive << ( in3 );

    SC_METHOD(thread_t4_1_fu_116_p2);
    sensitive << ( in2 );

    SC_METHOD(thread_t4_2_fu_122_p2);
    sensitive << ( in3 );
    sensitive << ( in5 );

    SC_METHOD(thread_t4_3_fu_128_p3);
    sensitive << ( icmp_ln24_fu_110_p2 );
    sensitive << ( t4_2_fu_122_p2 );
    sensitive << ( t4_1_fu_116_p2 );

    SC_METHOD(thread_t4_4_fu_136_p3);
    sensitive << ( icmp_ln21_fu_72_p2 );
    sensitive << ( t4_fu_104_p2 );
    sensitive << ( t4_3_fu_128_p3 );

    SC_METHOD(thread_t4_fu_104_p2);
    sensitive << ( in4 );
    sensitive << ( t6_5_fu_96_p3 );

    SC_METHOD(thread_t6_1_fu_166_p2);
    sensitive << ( in4 );

    SC_METHOD(thread_t6_2_fu_171_p3);
    sensitive << ( icmp_ln41_fu_155_p2 );
    sensitive << ( t6_1_fu_166_p2 );
    sensitive << ( t6_fu_161_p2 );

    SC_METHOD(thread_t6_3_fu_84_p2);
    sensitive << ( in1 );
    sensitive << ( in2 );

    SC_METHOD(thread_t6_4_fu_90_p2);
    sensitive << ( in2 );

    SC_METHOD(thread_t6_5_fu_96_p3);
    sensitive << ( icmp_ln31_fu_78_p2 );
    sensitive << ( t6_4_fu_90_p2 );
    sensitive << ( t6_3_fu_84_p2 );

    SC_METHOD(thread_t6_6_fu_144_p2);
    sensitive << ( in4 );
    sensitive << ( t4_4_fu_136_p3 );

    SC_METHOD(thread_t6_7_fu_179_p3);
    sensitive << ( t6_6_reg_231 );
    sensitive << ( icmp_ln19_fu_150_p2 );
    sensitive << ( t6_2_fu_171_p3 );

    SC_METHOD(thread_t6_fu_161_p2);
    sensitive << ( in2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "parker_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in1, "(port)in1");
    sc_trace(mVcdFile, in2, "(port)in2");
    sc_trace(mVcdFile, in3, "(port)in3");
    sc_trace(mVcdFile, in4, "(port)in4");
    sc_trace(mVcdFile, in5, "(port)in5");
    sc_trace(mVcdFile, in6, "(port)in6");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, t6_6_fu_144_p2, "t6_6_fu_144_p2");
    sc_trace(mVcdFile, t6_6_reg_231, "t6_6_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sub_ln21_fu_66_p2, "sub_ln21_fu_66_p2");
    sc_trace(mVcdFile, icmp_ln31_fu_78_p2, "icmp_ln31_fu_78_p2");
    sc_trace(mVcdFile, t6_4_fu_90_p2, "t6_4_fu_90_p2");
    sc_trace(mVcdFile, t6_3_fu_84_p2, "t6_3_fu_84_p2");
    sc_trace(mVcdFile, t6_5_fu_96_p3, "t6_5_fu_96_p3");
    sc_trace(mVcdFile, icmp_ln24_fu_110_p2, "icmp_ln24_fu_110_p2");
    sc_trace(mVcdFile, t4_2_fu_122_p2, "t4_2_fu_122_p2");
    sc_trace(mVcdFile, t4_1_fu_116_p2, "t4_1_fu_116_p2");
    sc_trace(mVcdFile, icmp_ln21_fu_72_p2, "icmp_ln21_fu_72_p2");
    sc_trace(mVcdFile, t4_fu_104_p2, "t4_fu_104_p2");
    sc_trace(mVcdFile, t4_3_fu_128_p3, "t4_3_fu_128_p3");
    sc_trace(mVcdFile, t4_4_fu_136_p3, "t4_4_fu_136_p3");
    sc_trace(mVcdFile, icmp_ln41_fu_155_p2, "icmp_ln41_fu_155_p2");
    sc_trace(mVcdFile, t6_1_fu_166_p2, "t6_1_fu_166_p2");
    sc_trace(mVcdFile, t6_fu_161_p2, "t6_fu_161_p2");
    sc_trace(mVcdFile, icmp_ln19_fu_150_p2, "icmp_ln19_fu_150_p2");
    sc_trace(mVcdFile, t6_2_fu_171_p3, "t6_2_fu_171_p3");
    sc_trace(mVcdFile, t6_7_fu_179_p3, "t6_7_fu_179_p3");
    sc_trace(mVcdFile, icmp_ln46_fu_186_p2, "icmp_ln46_fu_186_p2");
    sc_trace(mVcdFile, out1_1_fu_197_p2, "out1_1_fu_197_p2");
    sc_trace(mVcdFile, out1_fu_192_p2, "out1_fu_192_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("parker.hdltvin.dat");
    mHdltvoutHandle.open("parker.hdltvout.dat");
}

parker::~parker() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void parker::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        t6_6_reg_231 = t6_6_fu_144_p2.read();
    }
}

void parker::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void parker::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void parker::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void parker::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void parker::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void parker::thread_ap_return() {
    ap_return = (!icmp_ln46_fu_186_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln46_fu_186_p2.read()[0].to_bool())? out1_1_fu_197_p2.read(): out1_fu_192_p2.read());
}

void parker::thread_icmp_ln19_fu_150_p2() {
    icmp_ln19_fu_150_p2 = (!in5.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(in5.read() == ap_const_lv32_0);
}

void parker::thread_icmp_ln21_fu_72_p2() {
    icmp_ln21_fu_72_p2 = (!in2.read().is_01() || !sub_ln21_fu_66_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(in2.read() == sub_ln21_fu_66_p2.read());
}

void parker::thread_icmp_ln24_fu_110_p2() {
    icmp_ln24_fu_110_p2 = (!in1.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<1>(): sc_lv<1>(in1.read() == ap_const_lv32_4);
}

void parker::thread_icmp_ln31_fu_78_p2() {
    icmp_ln31_fu_78_p2 = (!in4.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(in4.read() == ap_const_lv32_0);
}

void parker::thread_icmp_ln41_fu_155_p2() {
    icmp_ln41_fu_155_p2 = (!in6.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(in6.read() == ap_const_lv32_0);
}

void parker::thread_icmp_ln46_fu_186_p2() {
    icmp_ln46_fu_186_p2 = (!t6_7_fu_179_p3.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(t6_7_fu_179_p3.read() == ap_const_lv32_0);
}

void parker::thread_out1_1_fu_197_p2() {
    out1_1_fu_197_p2 = (!in5.read().is_01() || !ap_const_lv32_8.is_01())? sc_lv<32>(): (sc_biguint<32>(in5.read()) + sc_biguint<32>(ap_const_lv32_8));
}

void parker::thread_out1_fu_192_p2() {
    out1_fu_192_p2 = (!in1.read().is_01() || !ap_const_lv32_FFFFFFFB.is_01())? sc_lv<32>(): (sc_biguint<32>(in1.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFB));
}

void parker::thread_sub_ln21_fu_66_p2() {
    sub_ln21_fu_66_p2 = (!ap_const_lv32_0.is_01() || !in3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(in3.read()));
}

void parker::thread_t4_1_fu_116_p2() {
    t4_1_fu_116_p2 = (!in2.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<32>(): (sc_biguint<32>(in2.read()) + sc_biguint<32>(ap_const_lv32_4));
}

void parker::thread_t4_2_fu_122_p2() {
    t4_2_fu_122_p2 = (!in3.read().is_01() || !in5.read().is_01())? sc_lv<32>(): (sc_biguint<32>(in3.read()) - sc_biguint<32>(in5.read()));
}

void parker::thread_t4_3_fu_128_p3() {
    t4_3_fu_128_p3 = (!icmp_ln24_fu_110_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln24_fu_110_p2.read()[0].to_bool())? t4_2_fu_122_p2.read(): t4_1_fu_116_p2.read());
}

void parker::thread_t4_4_fu_136_p3() {
    t4_4_fu_136_p3 = (!icmp_ln21_fu_72_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln21_fu_72_p2.read()[0].to_bool())? t4_fu_104_p2.read(): t4_3_fu_128_p3.read());
}

void parker::thread_t4_fu_104_p2() {
    t4_fu_104_p2 = (!t6_5_fu_96_p3.read().is_01() || !in4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(t6_5_fu_96_p3.read()) - sc_biguint<32>(in4.read()));
}

void parker::thread_t6_1_fu_166_p2() {
    t6_1_fu_166_p2 = (!ap_const_lv32_8.is_01() || !in4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_8) - sc_biguint<32>(in4.read()));
}

void parker::thread_t6_2_fu_171_p3() {
    t6_2_fu_171_p3 = (!icmp_ln41_fu_155_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln41_fu_155_p2.read()[0].to_bool())? t6_1_fu_166_p2.read(): t6_fu_161_p2.read());
}

void parker::thread_t6_3_fu_84_p2() {
    t6_3_fu_84_p2 = (!in2.read().is_01() || !in1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(in2.read()) + sc_biguint<32>(in1.read()));
}

void parker::thread_t6_4_fu_90_p2() {
    t6_4_fu_90_p2 = (!ap_const_lv32_0.is_01() || !in2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(in2.read()));
}

void parker::thread_t6_5_fu_96_p3() {
    t6_5_fu_96_p3 = (!icmp_ln31_fu_78_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln31_fu_78_p2.read()[0].to_bool())? t6_4_fu_90_p2.read(): t6_3_fu_84_p2.read());
}

void parker::thread_t6_6_fu_144_p2() {
    t6_6_fu_144_p2 = (!t4_4_fu_136_p3.read().is_01() || !in4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(t4_4_fu_136_p3.read()) + sc_biguint<32>(in4.read()));
}

void parker::thread_t6_7_fu_179_p3() {
    t6_7_fu_179_p3 = (!icmp_ln19_fu_150_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln19_fu_150_p2.read()[0].to_bool())? t6_2_fu_171_p3.read(): t6_6_reg_231.read());
}

void parker::thread_t6_fu_161_p2() {
    t6_fu_161_p2 = (!in2.read().is_01() || !ap_const_lv32_5.is_01())? sc_lv<32>(): (sc_biguint<32>(in2.read()) + sc_biguint<32>(ap_const_lv32_5));
}

void parker::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void parker::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1\" :  \"" << in1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2\" :  \"" << in2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in3\" :  \"" << in3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in4\" :  \"" << in4.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in5\" :  \"" << in5.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in6\" :  \"" << in6.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

