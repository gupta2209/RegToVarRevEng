// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _parker_HH_
#define _parker_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct parker : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in1;
    sc_in< sc_lv<32> > in2;
    sc_in< sc_lv<32> > in3;
    sc_in< sc_lv<32> > in4;
    sc_in< sc_lv<32> > in5;
    sc_in< sc_lv<32> > in6;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    parker(sc_module_name name);
    SC_HAS_PROCESS(parker);

    ~parker();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > t6_6_fu_144_p2;
    sc_signal< sc_lv<32> > t6_6_reg_231;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > sub_ln21_fu_66_p2;
    sc_signal< sc_lv<1> > icmp_ln31_fu_78_p2;
    sc_signal< sc_lv<32> > t6_4_fu_90_p2;
    sc_signal< sc_lv<32> > t6_3_fu_84_p2;
    sc_signal< sc_lv<32> > t6_5_fu_96_p3;
    sc_signal< sc_lv<1> > icmp_ln24_fu_110_p2;
    sc_signal< sc_lv<32> > t4_2_fu_122_p2;
    sc_signal< sc_lv<32> > t4_1_fu_116_p2;
    sc_signal< sc_lv<1> > icmp_ln21_fu_72_p2;
    sc_signal< sc_lv<32> > t4_fu_104_p2;
    sc_signal< sc_lv<32> > t4_3_fu_128_p3;
    sc_signal< sc_lv<32> > t4_4_fu_136_p3;
    sc_signal< sc_lv<1> > icmp_ln41_fu_155_p2;
    sc_signal< sc_lv<32> > t6_1_fu_166_p2;
    sc_signal< sc_lv<32> > t6_fu_161_p2;
    sc_signal< sc_lv<1> > icmp_ln19_fu_150_p2;
    sc_signal< sc_lv<32> > t6_2_fu_171_p3;
    sc_signal< sc_lv<32> > t6_7_fu_179_p3;
    sc_signal< sc_lv<1> > icmp_ln46_fu_186_p2;
    sc_signal< sc_lv<32> > out1_1_fu_197_p2;
    sc_signal< sc_lv<32> > out1_fu_192_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_FFFFFFFB;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln19_fu_150_p2();
    void thread_icmp_ln21_fu_72_p2();
    void thread_icmp_ln24_fu_110_p2();
    void thread_icmp_ln31_fu_78_p2();
    void thread_icmp_ln41_fu_155_p2();
    void thread_icmp_ln46_fu_186_p2();
    void thread_out1_1_fu_197_p2();
    void thread_out1_fu_192_p2();
    void thread_sub_ln21_fu_66_p2();
    void thread_t4_1_fu_116_p2();
    void thread_t4_2_fu_122_p2();
    void thread_t4_3_fu_128_p3();
    void thread_t4_4_fu_136_p3();
    void thread_t4_fu_104_p2();
    void thread_t6_1_fu_166_p2();
    void thread_t6_2_fu_171_p3();
    void thread_t6_3_fu_84_p2();
    void thread_t6_4_fu_90_p2();
    void thread_t6_5_fu_96_p3();
    void thread_t6_6_fu_144_p2();
    void thread_t6_7_fu_179_p3();
    void thread_t6_fu_161_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
